@model Mvc.DynamicWizard.ViewModels.WizardViewModel
@{
    Layout = null;
    string wizardConntent = null;
}

<link href="~/Content/SmartWizard/css/smart_wizard.min.css" rel="stylesheet" />
<link href="~/Content/SmartWizard/css/smart_wizard_theme_arrows.min.css" rel="stylesheet" />

<div id="@Model.WizardId">
    @*@Html.Hidden("StepType", Model.CurrentStep.GetType())
    @Html.Serialize("wizardModel", Model)*@
    @Html.Hidden("key", Model.WizardId)
    <ul class="">
        @foreach (var step in Model.GetSteps())
        {
            <li>
                @*<a href="#@step.StepId"  data-content-url="@step.ActionUrl.ToString()">*@
                <a href="#@step.StepId">
                    <span>@(step.Title ?? "مرحله " + step.Index)</span>
                    <br />
                    <i class="@step.Icon"></i>
                    <small>@step.Descriptions</small>
                </a>
            </li>
            wizardConntent += string.Format("<div id='{0}'></div>", step.StepId);
        }
    </ul>
    <div>
        @Html.Raw(wizardConntent)
    </div>
</div>

<script src="~/Content/SmartWizard/js/jquery.smartWizard.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        // Smart Wizard
        $('#@Model.WizardId').smartWizard({
            selected: 0,  // Initial selected step, 0 = first step
            keyNavigation: true, // Enable/Disable keyboard navigation(left and right keys are used if enabled)
            autoAdjustHeight: true, // Automatically adjust content height
            cycleSteps: false, // Allows to cycle the navigation of steps
            backButtonSupport: true, // Enable the back button support
            useURLhash: true, // Enable selection of the step based on url hash
            lang: {  // Language variables
                next: 'مرحله بعد',
                previous: 'مرحله قبل'
            },
            toolbarSettings: {
                toolbarPosition: 'bottom', // none, top, bottom, both
                toolbarButtonPosition: 'right', // left, right
                showNextButton: true, // show/hide a Next button
                showPreviousButton: true, // show/hide a Previous button
                toolbarExtraButtons: [
			//$('<button></button>').text('Finish')
			//		      .addClass('btn btn-info')
			//		      .on('click', function () {
			//		          alert('Finsih button click');
			//		      }),
			//$('<button></button>').text('Cancel')
			//		      .addClass('btn btn-danger')
			//		      .on('click', function () {
			//		          alert('Cancel button click');
			//		      })
                ]
            },
            anchorSettings: {
                anchorClickable: true, // Enable/Disable anchor navigation
                enableAllAnchors: false, // Activates all anchors clickable all times
                markDoneStep: true, // add done css
                enableAnchorOnDoneStep: true // Enable/Disable the done steps navigation
            },
            contentURL: '/Widgets/UpdateWizardStep', // content url, Enables Ajax content loading. can set as data data-content-url on anchor
            ajaxSettings: { data: { key: $('#key').val() } },
            disabledSteps: [],    // Array Steps disabled
            errorSteps: [],    // Highlight step with errors
            theme: 'arrows',    //'dots',
            transitionEffect: 'fade', // Effect on navigation, none/slide/fade
            transitionSpeed: '400'
        });
        // Smart Wizard events
        $('#@Model.WizardId').on("leaveStep", function (e, anchorObject, stepNumber, stepDirection) {
            // check form validation
            var $form = $(anchorObject.context).find("form:visible");
            var submitResult = false;
            if ($form.length > 0 && $form.valid()) {
                $form.unbind('submit')
                    .submit(function (event) { // catch the form's submit event
                        event.preventDefault();
                        $.ajax({ // create an AJAX call...
                            async: false,
                            data: $(this).serialize(), // get the form data
                            type: $(this).attr('method'), // GET or POST
                            url: $(this).attr('action'), // the file to call
                            success: function (response) { // on success..
                                if (!response.Error) {
                                    submitResult = true;
                                };
                            }
                        });
                        return false; // cancel original event to prevent form submitting
                    }).submit();
            } else { submitResult = true; }
            return submitResult && changeStep(stepNumber, stepDirection);
        });
    });
    function changeStep(stepNumber, stepDirection) {
        var _url = '';
        if (stepDirection == 'forward')
            _url = '/Widgets/NextWizardStep';
        else if (stepDirection == 'backward')
            _url = '/Widgets/PreviousWizardStep';
        else return false;
        var result = -1;
        var data = $("div.step-content:visible").find(":input").serializeArray();
        data.push({ name: 'key', value: $('#key').val() });
        $.ajax({
            type: 'POST',
            url: _url,
            data: data,
            async: false
        }).done(function (data) { result = data });
        return (result >= 0) && (result !== stepNumber);
    }
</script>
